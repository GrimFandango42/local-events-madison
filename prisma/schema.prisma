// Simplified Prisma Schema for Local Events Platform (SQLite)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Main Tables
model Venue {
  id          String    @id @default(cuid())
  name        String
  venueType   String    @default("venue") // venue, restaurant, bar, etc.
  
  // Location data
  address     String?
  city        String    @default("Madison")
  state       String    @default("WI")
  zipCode     String?   @map("zip_code")
  latitude    Float?
  longitude   Float?
  neighborhood String?  // Madison neighborhood
  
  // Contact information
  website     String?
  phoneNumber String?   @map("phone_number")
  email       String?
  
  // Business details
  description     String?
  priceRange      String?   @map("price_range")
  
  // Event hosting details
  hostsEvents         Boolean @default(true) @map("hosts_events")
  eventCalendarUrl    String? @map("event_calendar_url")
  
  // Relationships
  eventSources EventSource[]
  events       Event[]
  
  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  verified  Boolean  @default(false)

  @@map("venues")
}

model EventSource {
  id              String          @id @default(cuid())
  name            String
  url             String          @unique
  sourceType      String          @default("venue") // venue, restaurant, cultural, etc.
  
  // Association with venues
  venueId         String?         @map("venue_id")
  venue           Venue?          @relation(fields: [venueId], references: [id], onDelete: SetNull)
  
  // Scraping configuration (stored as JSON string)
  scrapingConfig  String          @default("{}") @map("scraping_config")
  extractionRules String          @default("{}") @map("extraction_rules")
  
  // Status tracking
  isActive        Boolean      @default(true) @map("is_active")
  status          String       @default("active") // active, paused, failed
  lastScrapedAt   DateTime?    @map("last_scraped_at")
  totalAttempts   Int          @default(0) @map("total_attempts")
  successfulAttempts Int       @default(0) @map("successful_attempts")
  successRate     Float        @default(100.0) @map("success_rate")
  
  // Relationships
  events          Event[]
  scrapingLogs    ScrapingLog[]
  
  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_sources")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String?
  category    String        @default("other") // music, food, culture, etc.
  
  // Timing
  startDateTime DateTime @map("start_datetime")
  endDateTime   DateTime? @map("end_datetime")
  timezone      String   @default("America/Chicago")
  allDay        Boolean  @default(false) @map("all_day")
  
  // Location
  venueId        String? @map("venue_id")
  venue          Venue?  @relation(fields: [venueId], references: [id], onDelete: SetNull)
  customLocation String? @map("custom_location")
  
  // Pricing
  price           String? // Free, $10, $5-15, etc.
  ticketUrl       String? @map("ticket_url")
  
  // Content
  imageUrl       String? @map("image_url")
  tags           String  @default("") // Comma-separated tags
  
  // Source tracking
  sourceId    String?      @map("source_id")
  source      EventSource? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  sourceUrl   String?      @map("source_url")
  
  // Status
  status      String   @default("published") // published, draft, archived
  
  // Metadata
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Link checks
  linkChecks  LinkCheck[]
  
  // User favorites
  favorites   UserFavorite[]

  @@map("events")
}

model ScrapingLog {
  id        String   @id @default(cuid())
  sourceId  String   @map("source_id")
  source    EventSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  // Execution details
  startedAt    DateTime        @map("started_at")
  completedAt  DateTime?       @map("completed_at")
  status       String          // running, completed, failed
  
  // Results
  eventsFound   Int @default(0) @map("events_found")
  
  // Error tracking
  error         String? 
  metadata      String? // JSON string for additional data
  
  createdAt DateTime @default(now()) @map("created_at")

  @@map("scraping_logs")
}

// Track link validation results for event/source URLs
model LinkCheck {
  id         String   @id @default(cuid())
  url        String
  statusCode Int?
  ok         Boolean  @default(false)
  error      String?
  checkedAt  DateTime @default(now())

  // Optional association to events
  eventId    String?  @map("event_id")
  event      Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@index([url])
  @@index([checkedAt])
  @@map("link_checks")
}

// User authentication and preferences
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  
  // Privacy-focused minimal data storage
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")
  
  // User preferences
  timezone      String    @default("America/Chicago")
  emailNotifications Boolean @default(false) @map("email_notifications")
  
  // Relationships
  favorites     UserFavorite[]
  
  @@map("users")
}

// User's favorited events
model UserFavorite {
  id        String   @id @default(cuid())
  
  // User reference
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Event reference
  eventId   String   @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  
  // Ensure user can only favorite each event once
  @@unique([userId, eventId])
  @@map("user_favorites")
}
