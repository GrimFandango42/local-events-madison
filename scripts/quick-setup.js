#!/usr/bin/env node

/**
 * Quick Setup Script for Local Development
 * Gets you up and running with the Local Events platform in minutes
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

const log = (message, color = colors.reset) => {
  console.log(`${color}${message}${colors.reset}`);
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => {
  return new Promise(resolve => rl.question(query, resolve));
};

class QuickSetup {
  constructor() {
    this.projectRoot = process.cwd();
    this.envPath = path.join(this.projectRoot, '.env.local');
    this.packageJsonPath = path.join(this.projectRoot, 'package.json');
  }

  async run() {
    log('\nüé™ Local Events Platform - Quick Setup', colors.cyan + colors.bright);
    log('='.repeat(50), colors.cyan);

    try {
      await this.checkPrerequisites();
      await this.setupEnvironment();
      await this.installDependencies();
      await this.setupDatabase();
      await this.addSampleData();
      await this.runTests();
      await this.startDevelopment();
    } catch (error) {
      log(`\n‚ùå Setup failed: ${error.message}`, colors.red);
      process.exit(1);
    } finally {
      rl.close();
    }
  }

  async checkPrerequisites() {
    log('\nüìã Checking prerequisites...', colors.yellow);

    // Check Node.js version
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion < 18) {
      throw new Error(`Node.js 18+ required. You have ${nodeVersion}`);
    }
    log(`‚úÖ Node.js ${nodeVersion}`, colors.green);

    // Check if npm is available
    try {
      execSync('npm --version', { stdio: 'ignore' });
      log('‚úÖ npm available', colors.green);
    } catch {
      throw new Error('npm is required but not installed');
    }

    // Check if package.json exists
    if (!fs.existsSync(this.packageJsonPath)) {
      throw new Error('package.json not found. Run this script from the project root.');
    }
    log('‚úÖ Project structure valid', colors.green);
  }

  async setupEnvironment() {
    log('\nüîß Setting up environment...', colors.yellow);

    if (fs.existsSync(this.envPath)) {
      const overwrite = await question('Environment file exists. Overwrite? (y/n): ');
      if (overwrite.toLowerCase() !== 'y') {
        log('‚úÖ Using existing environment file', colors.green);
        return;
      }
    }

    // Create basic environment configuration
    const envContent = `# Local Events Platform - Development Environment
# Generated by quick-setup script

# Basic Configuration
NODE_ENV=development
CITY_NAME=madison

# Database (SQLite for development)
DATABASE_URL="file:./dev.db"

# Authentication (generate random secrets)
NEXTAUTH_SECRET="${this.generateSecret()}"
NEXTAUTH_URL="http://localhost:3000"

# Optional API Keys (add your own)
# GOOGLE_MAPS_API_KEY=your-key-here
# OPENWEATHER_API_KEY=your-key-here
# SENDGRID_API_KEY=your-key-here

# Google OAuth (optional)
# GOOGLE_CLIENT_ID=your-client-id
# GOOGLE_CLIENT_SECRET=your-client-secret

# Development Settings
ENABLE_SCRAPING=false
LOG_LEVEL=debug
`;

    fs.writeFileSync(this.envPath, envContent);
    log('‚úÖ Environment file created', colors.green);
  }

  async installDependencies() {
    log('\nüì¶ Installing dependencies...', colors.yellow);
    log('This may take a few minutes...', colors.cyan);

    try {
      execSync('npm install', { 
        stdio: 'inherit',
        cwd: this.projectRoot 
      });
      log('‚úÖ Dependencies installed', colors.green);
    } catch (error) {
      throw new Error('Failed to install dependencies');
    }
  }

  async setupDatabase() {
    log('\nüóÑÔ∏è Setting up database...', colors.yellow);

    try {
      // Generate Prisma client
      execSync('npx prisma generate', { 
        stdio: 'inherit',
        cwd: this.projectRoot 
      });
      log('‚úÖ Prisma client generated', colors.green);

      // Run migrations
      execSync('npx prisma db push', { 
        stdio: 'inherit',
        cwd: this.projectRoot 
      });
      log('‚úÖ Database schema created', colors.green);
    } catch (error) {
      throw new Error('Failed to setup database');
    }
  }

  async addSampleData() {
    log('\nüé≠ Adding sample Madison data...', colors.yellow);

    const seedScript = `
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seed() {
  // Create sample venues
  const majestic = await prisma.venue.create({
    data: {
      name: 'The Majestic Theatre',
      address: '115 King St, Madison, WI 53703',
      neighborhood: 'Downtown',
      website: 'https://majesticmadison.com',
      phoneNumber: '(608) 255-0901',
      hostsEvents: true,
      eventCalendarUrl: 'https://majesticmadison.com/events'
    }
  });

  const memorialUnion = await prisma.venue.create({
    data: {
      name: 'Memorial Union',
      address: '800 Langdon St, Madison, WI 53706',
      neighborhood: 'Campus',
      website: 'https://union.wisc.edu',
      hostsEvents: true
    }
  });

  // Create sample event sources
  await prisma.eventSource.create({
    data: {
      name: 'Majestic Theatre Events',
      url: 'https://majesticmadison.com/events',
      sourceType: 'venue',
      venueId: majestic.id,
      isActive: true,
      scrapingConfig: {
        method: 'playwright',
        waitTime: 3000
      },
      extractionRules: {
        selectors: {
          container: '.event-item',
          title: '.event-title',
          date: '.event-date',
          description: '.event-description'
        }
      }
    }
  });

  // Create sample events
  await prisma.event.create({
    data: {
      title: 'Sample Concert - Local Band',
      description: 'A fantastic local band performing original music',
      startDateTime: new Date(Date.now() + 86400000 * 7), // Next week
      category: 'music',
      price: '$15',
      venueId: majestic.id,
      sourceUrl: 'https://majesticmadison.com/events',
      tags: ['live-music', 'local'],
      status: 'published'
    }
  });

  await prisma.event.create({
    data: {
      title: 'UW Memorial Union Terrace - Jazz Night',
      description: 'Enjoy jazz music on the beautiful terrace',
      startDateTime: new Date(Date.now() + 86400000 * 3), // In 3 days
      category: 'music',
      price: 'Free',
      venueId: memorialUnion.id,
      sourceUrl: 'https://union.wisc.edu/events',
      tags: ['free', 'outdoor', 'jazz'],
      status: 'published'
    }
  });

  console.log('Sample data created successfully!');
}

seed().catch(console.error).finally(() => prisma.$disconnect());
`;

    // Write and run seed script
    const seedPath = path.join(this.projectRoot, 'temp-seed.js');
    fs.writeFileSync(seedPath, seedScript);

    try {
      execSync('node temp-seed.js', { 
        stdio: 'inherit',
        cwd: this.projectRoot 
      });
      fs.unlinkSync(seedPath); // Clean up
      log('‚úÖ Sample data added', colors.green);
    } catch (error) {
      if (fs.existsSync(seedPath)) fs.unlinkSync(seedPath);
      throw new Error('Failed to add sample data');
    }
  }

  async runTests() {
    log('\nüß™ Running basic tests...', colors.yellow);

    // Check if jest is available
    const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
    const hasJest = packageJson.devDependencies?.jest || packageJson.dependencies?.jest;

    if (!hasJest) {
      log('‚ö†Ô∏è Jest not found, skipping tests', colors.yellow);
      return;
    }

    try {
      // Run a quick test to validate setup
      execSync('npm test -- --passWithNoTests --testTimeout=10000', { 
        stdio: 'inherit',
        cwd: this.projectRoot 
      });
      log('‚úÖ Basic tests passed', colors.green);
    } catch (error) {
      log('‚ö†Ô∏è Some tests failed, but setup continues', colors.yellow);
    }
  }

  async startDevelopment() {
    log('\nüöÄ Setup complete!', colors.green + colors.bright);
    log('='.repeat(30), colors.green);

    log('\nüìã Quick Start Commands:', colors.cyan);
    log('  npm run dev          - Start development server', colors.white);
    log('  npm run test         - Run test suite', colors.white);
    log('  npm run build        - Build for production', colors.white);
    log('  npx prisma studio    - Open database browser', colors.white);

    log('\nüìç URLs:', colors.cyan);
    log('  http://localhost:3000       - Your platform', colors.white);
    log('  http://localhost:3000/api   - API endpoints', colors.white);

    log('\nüîß Next Steps:', colors.cyan);
    log('  1. Add your API keys to .env.local', colors.white);
    log('  2. Customize config/madison.json', colors.white);
    log('  3. Start adding your city\\'s venues', colors.white);

    const startNow = await question('\nüé™ Start development server now? (y/n): ');
    
    if (startNow.toLowerCase() === 'y') {
      log('\nüöÄ Starting development server...', colors.green);
      log('Press Ctrl+C to stop the server\n', colors.yellow);
      
      // Start the development server
      const devServer = spawn('npm', ['run', 'dev'], {
        stdio: 'inherit',
        cwd: this.projectRoot,
        shell: true
      });

      // Handle graceful shutdown
      process.on('SIGINT', () => {
        log('\n\nüëã Thanks for using Local Events Platform!', colors.cyan);
        devServer.kill();
        process.exit(0);
      });
    } else {
      log('\n‚ú® Setup complete! Run `npm run dev` when you\\'re ready.', colors.green);
    }
  }

  generateSecret(length = 32) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let secret = '';
    for (let i = 0; i < length; i++) {
      secret += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return secret;
  }
}

// Run the quick setup
if (require.main === module) {
  new QuickSetup().run();
}

module.exports = QuickSetup;